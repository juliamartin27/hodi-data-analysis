# Find average time from when merchants sign up to when they get 20 responses on the survey
SELECT DISTINCT survey_id FROM public.survey_responses;
# join on shops and survey responses inserted_at

SELECT DISTINCT shops.id, shops.name, (shops.updated_at - shops.inserted_at) 
FROM public.shops
FULL JOIN public.analytics_events
ON public.shops.id = public.analytics_events.ref_id;


#responses are associated with shops in surveys
join in surveys where survey_response.survey_id = surveys.id
surveys.shops_id = shops.id
100th response where it's inserted at is compared to the shops inserted at

# distinct times each survey was inserted, sorted by shop_id
SELECT DISTINCT(inserted_at, context->>'shop_id')
FROM public.analytics_events;


SELECT id, responses, shop_id FROM public.surveys
GROUP BY id, shop_id
HAVING COUNT(shop_id) > 0;

SELECT * FROM public.surveys
FULL JOIN public.survey_responses 
ON survey_responses.survey_id = surveys.id;

SELECT DISTINCT(inserted_at, context->>'shop_id')
FROM public.analytics_events;

WITH
	customer_responses AS (
		SELECT inserted_at, (context->>'shop_id')::character(21) AS jshop_id
		FROM public.analytics_events
		),
	shop_surveys AS (
		SELECT surveys.id, surveys.shop_id, surveys.inserted_at, surveys.updated_at,
    	survey_responses.id, survey_responses.survey_id, survey_responses.inserted_at,
    	survey_responses.updated_at 
    	FROM public.surveys
    	LEFT JOIN public.survey_responses
    	ON survey_responses.survey_id = surveys.id
		)
SELECT
	customer_responses.inserted_at,
	jshop_id,
	COUNT(*)
FROM customer_responses
LEFT JOIN shop_surveys ON customer_responses.jshop_id = shop_surveys.shop_id
GROUP BY jshop_id, customer_responses.inserted_at
HAVING COUNT(*) > 0
LIMIT 100;

WITH
	survey_ids AS (
		SELECT surveys.id AS ind_surv, surveys.inserted_at AS ind_surv_ins,
		surveys.shop_id AS ind_shop, survey_responses.inserted_at
		FROM public.surveys
		FULL JOIN public.survey_responses
		ON survey_responses.survey_id = surveys.id
	),
	shops_ids AS (
		SELECT * FROM public.surveys
		FULL JOIN public.shops
		ON surveys.shop_id = shops.id
	),
	survey_response_times AS (
		SELECT survey_responses.inserted_at AS response_times
		FROM public.survey_responses
	)
SELECT response_times, ind_surv, ind_surv_ins, ind_shop
FROM survey_response_times
FULL JOIN survey_ids ON survey_ids.inserted_at = survey_response_times.response_times
FULL JOIN shops_ids ON survey_ids.ind_shop = shops_ids.shop_id
ORDER BY shops_ids.shop_id;
